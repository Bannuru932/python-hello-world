### To build & compile the project ###

compile-package-python:
  image: $PYTHON_IMG
  stage: build
  variables:
    REQ_FILE: requirements.txt
    TARGET: /dist
  script:
    - pip3 install -r $REQ_FILE
  tags:
    - linux

### SecOPS ####

#### To check the code coverage and code smells ###

code-quality-python:
  image: $SONAR_4_7_1_IMG
  stage: verify-build
  variables:
    SONAR_HOST: 'https://sonarqube.com'
    SONAR_EXCLUSIONS: '**/*.xml, **/*.xlsm, **/*.xsd, **/*.css, **/*.less, **/*.scss'
    SONAR_BRANCH: master
    COVERAGE_FILE: $CI_PROJECT_DIR/coverage.xml
    REQ_FILE: requirements.txt
    UNIT_TEST_FILE: unit-test/serverTest.py
    SONAR_LOGIN_TOKEN: *****************
  script:
      pip3 install -r $REQ_FILE
      coverage run -m --source=. unittest $UNIT_TEST_FILE
      coverage report
      coverage xml -i -o $COVERAGE_FILE
      HTTP_CODE=$(curl --write-out "%{http_code}\n" --silent --output /dev/null --user $SONAR_LOGIN_TOKEN':' $SONAR_HOST/api/qualitygates/project_status?projectKey=$SONAR_PROJECT_NAME)
      if [ $HTTP_CODE = 404 ]
      then
      echo sonar-scanner
      sonar-scanner -Dsonar.projectKey=$SONAR_PROJECT_NAME -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST -Dsonar.login=$SONAR_LOGIN_TOKEN -Dsonar.exclusions="$SONAR_EXCLUSIONS" -Dsonar.python.coverage.reportPaths=$COVERAGE_FILE
      else
      echo sonar-scanner
      sonar-scanner -Dsonar.projectKey=$SONAR_PROJECT_NAME -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST -Dsonar.branch.name=$SONAR_BRANCH -Dsonar.login=$SONAR_LOGIN_TOKEN -Dsonar.exclusions="$SONAR_EXCLUSIONS" -Dsonar.python.coverage.reportPaths=$COVERAGE_FILE
      fi
      echo "Validating the status"
      sleep 20 # waiting for 20 seconds to the server to process the scanned data and get the latest
      sonar_taskid=$(grep -e "^ceTaskId=" .scannerwork/report-task.txt | sed -e 's/ceTaskId=\(.*\)/\1/g')
      echo "sonar task id - ${sonar_taskid}"
      for ((i=1;i<=$SONAR_RETRY;i++));
      do
      echo "Retry ${i}"
      task_status=$(curl -sSf --user $SONAR_LOGIN_TOKEN':' $SONAR_HOST/api/ce/task?id=$sonar_taskid | jq -r '.task.status')
      echo "Task status - $task_status"
      [[ "$task_status" != "SUCCESS" ]] || break
      sleep $SONAR_SLEEP
      done
      # fail if analysis task did not complete successfully
      if [ "$task_status" != "SUCCESS" ]; then echo Analysis task not successful; exit 1; fi
      sonar_analysisid=$(curl -sSf --user $SONAR_LOGIN_TOKEN':' $SONAR_HOST/api/ce/task?id=$sonar_taskid | jq -r '.task.analysisId')
      # checking the status of the result from sonar server and fail the job if it fails in sonar server
      sonar_projectstatus=$(curl -sSf --user $SONAR_LOGIN_TOKEN':' $SONAR_HOST/api/qualitygates/project_status?analysisId=$sonar_analysisid | jq -r '.projectStatus.status')
      curl -sSf --user $SONAR_LOGIN_TOKEN':' $SONAR_HOST/api/qualitygates/project_status?analysisId=$sonar_analysisid
      sonar_line_coverage=$(curl -sSf --user $SONAR_LOGIN_TOKEN':' $SONAR_HOST/api/qualitygates/project_status?analysisId=$sonar_analysisid | jq -r '.projectStatus.conditions[].actualValue')
      echo "Sonar Scan lines coverage value is - ${sonar_line_coverage}"
      if [ $sonar_projectstatus == "ERROR" ]; then echo "Sonar Scan is failing in Quality Gates" ; exit 1; fi # failing this job if there is any error in the quality gate conditions
      fi
  tags:
    - linux
   
   
   
   
# # This is to identifies and catalogs all the application related security scans and known vulnerability

Checkmarx-scan:
  stage: verify-build
  variables: 
     username: ******
     password: ******
     cx_server: checmarx.com
     CX_PROJECT_NAME: python-app
     CX_FOLDER_PATH: *********
  script:
    - if [[ "${SKIP_SCAN_CX,,}" =~ "true" ]]; then curl -s $ERROR_LOG > scan-msg.txt; cat scan-msg.txt; exit 1; 
      else sastctl --vault "$CX_SERVER" "$CX_PROJECT_NAME" "$CX_FOLDER_PATH"; fi
  tags:
    - linux
    
    
# # This is to identifies and catalogs all third-party software components, associated licenses, and known vulnerability

Blackduck-scan:
   stage: verify-build
   image: $JAVA_JDK_11_IMG
   variables:
     username: ******
     password: ******
     SCM_SCAN_TYPE: generic
     SCM_PROJECT_NAME: python-app
     SCM_PROJECT_VERSION: v1
     SCM_PATH: ******
  script:
    - if [[ "${SKIP_SCAN_BLACKDUCK,,}" =~ "true" ]]; then curl -s $ERROR_LOG > scan-msg.txt; cat scan-msg.txt; 
     exit 1; else scmctl --vault $SCM_SCAN_TYPE $SCM_PROJECT_NAME $SCM_PROJECT_VERSION $SCM_PATH; fi
  tags:
    - linux





# # This is to upload the project's published output(deployable) to artifactory
artifactory-upload:
  stage: publish-artifact
  image: $JFROG_CLI_IMG
  variables:
    CICD_ARTIFACTORY: https://artifactory.company.com/artifactory/api/search/artifact
    UPLOAD_FILENAME: $CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA.tar.gz
    UPLOAD_PATH: cicd-prod/$CI_PROJECT_PATH
    username: ********
    password: ********
    APIKEY: *******************
  script:
    - jfrog rt u $PACKAGE_NAME.tar.gz $CI_PROJECT_NAME/$CI_PROJECT_NAME-$CI_COMMIT_SHA.tar.gz --url=$DCS_DEV_ARTIFACTORY --user=$username --password=$password
    - cd $CI_PROJECT_DIR/$TARGET
    - tar -czvf $UPLOAD_FILENAME *
    - |
      HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" -H "X-JFrog-Art-Api:$APIKEY" -X GET $CICD_ARTIFACTORY/$UPLOAD_PATH/$UPLOAD_FILENAME)
      if [ $HTTP_CODE = 200 ]
        then
          echo "Artifact already exists" && exit 0
        else
          echo "Uploading artifact"
      fi
    - jfrog rt u $UPLOAD_FILENAME $UPLOAD_PATH/$UPLOAD_FILENAME --url=$CICD_ARTIFACTORY --apikey=$APIKEY
  tags:
    - linux


# # This is to scan the upload the project's published output(deployable) to artifactory

xray-scan:
  stage: verify-build
  image: $
  variables: 
    username: ********
    password: ********
  script:
    - curl --ciphers 'DEFAULT:!DH' 'https://artifactory.company.com/artifactory/api/search/artifact' -o $CI_PROJECT_DIR/xray-scan.sh
    - chmod +x *.sh
    - if [[ "${path,,}" =~ "true" ]]; then curl -s $ERROR_LOG > scan-msg.txt; cat scan-msg.txt; exit 1; else ./xray-scan.sh $APIKEY; fi
  tags:
    - linux 





# ****** Downloading the right package from Artifactory to deploy //No need to pass the credentials ****** #
# artifactory DOWNLOAD
.retrieve-artifact:
  stage: retrieve-artifact
  image: $JFROG_CLI_IMG
  variables:
    CICD_ARTIFACTORY: https://artifactory.company.com/artifactory/api/search/artifact
    UPLOAD_FILENAME: $CI_PROJECT_NAME-$CI_COMMIT_SHORT_SHA.tar.gz
    UPLOAD_PATH: cicd-prod/$CI_PROJECT_PATH
  script:
    - jfrog rt c --url=$CICD_ARTIFACTORY --apikey=$APIKEY
    - jfrog rt dl --flat=true $UPLOAD_PATH/$UPLOAD_FILENAME    
    - mkdir -p $CI_PROJECT_DIR/$TARGET
    - cd $CI_PROJECT_DIR/$TARGET
    - tar -xvf $CI_PROJECT_DIR/$UPLOAD_FILENAME
    - echo "Downloaded from Artifactory"
  dependencies: []
  artifacts:
    expire_in: 1 week
    paths:
      - $TARGET
  tags:
    - linux


 Build-docker:
  image: $ubuntu_image
  stage: build-docker
  variables:
    ACR_Username: *********
    ACR_Password: *********
    ACR_SERVER: docker.com
  script:
    - pip3 install -r $REQ_FILE
    - docker login -u $ACR_Username --password-stdin $ACR_SERVER;
    - DOCKER_IMAGE == docker build –t DOCKER_IMAGE:0.1.
    - docker push $DOCKER_IMAGE;
    - docker logout $ACR_SERVER;
  tags:
    - linux
    



AKS-deployment: 
 image : $azure-cli-image
 stage : prod
 varibales:
   ACR: ***********
   DEPLOYMENT_FILE: **************
   SERVICE_FILE: **************
 script:
    - az login --service-principal -u $CLIENT_ID -p $CLIENT_SECRET --tenant $TENANTID
    - az aks create — resource-group myResourceGroup — name myAKSCluster 
    - az aks show --name $AKS_CLUSTER_NAME --resource-group $ResourceGroup --output table
    - az aks get-credentials --resource-group $ResourceGroup --name $AKS_CLUSTER_NAME
    - kubectl get nodes
    - if [[ -f $DEPLOYMENT_FILE ]]; then kubectl apply -f $DEPLOYMENT_FILE ; fi
    - if [[ -f $SERVICE_FILE ]]; then kubectl apply -f $SERVICE_FILE ; fi
    - kubectl get pods
    
    
